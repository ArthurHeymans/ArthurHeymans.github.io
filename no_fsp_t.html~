<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- Oct 11, 2022 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Open source cache as ram with Intel Bootguard</title>
<meta name="author" content="Arthur Heymans" />
<meta name="generator" content="Org Mode" />
<link rel='icon' type='image/x-icon' href='/images/favicon.ico'/>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<link rel='stylesheet' href='https://code.cdn.mozilla.net/fonts/fira.css'>
<link rel='stylesheet' href='/css/site.css?v=2' type='text/css'/>
<link rel='stylesheet' href='/css/custom.css' type='text/css'/>
<link rel='stylesheet' href='/css/syntax-coloring.css' type='text/css'/>
<script>
// @license magnet:?xt=urn:btih:1f739d935676111cfff4b4693e3816e664797050&amp;dn=gpl-3.0.txt GPL-v3-or-Later
     function CodeHighlightOn(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
// @license-end
</script>
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="/"> UP </a>
 |
 <a accesskey="H" href="/"> HOME </a>
</div><header id="top" class="status">
<div class='intro'>
  <img src='/images/about/profile.png' alt='Arthur Heymans' class='no-border'/>
  <h1>
    <span class="gray">Arthur</span>
    <span class="black">Heymans</span>
  </h1>
  <p>hacker</p>
</div>

<div class='nav'>
<ul>
<li><a href='/'>Blog</a>.</li>
<li><a href='/index.xml'>RSS</a>.</li>
<li><a href='/about/'>About</a></li>
</ul>
</div>
</header>
<main id="content" class="content">
<h1 class="title">Open source cache as ram with Intel Bootguard
<br />
<span class="subtitle">Published on Jun 25, 2021 by Arthur Heymans.</span>
</h1>

<div id="org581b5e5" class="figure">
<p><img src="../images/posts/no_fsp_t.png" alt="no_fsp_t.png" class="center no-border" width="70%" height="70%" />
</p>
</div>

<p>
This blog enty first appeared on the 9esec <a href="https://9esec.io/blog/open-source-cache-as-ram-with-intel-bootguard/">blog</a>.
</p>

<section id="outline-container-org6e6b63b" class="outline-2">
<h2 id="org6e6b63b">FSP-T in open source projects</h2>
<div class="outline-text-2" id="text-org6e6b63b">
<p>
X86 CPUs boot up in a very bare state. They execute the first instruction at the
top of memory mapped flash in 16 bit real mode. DRAM is not avaible (AMD Zen
CPUs are the exception) and the CPU typically has no memory addressable SRAM, a
feature which is common on ARM SOCs. This makes running C code quite hard
because you are required to have a stack. This was solved on x86 using a
technique called cache as ram or CAR. Intel calls this non eviction mode or NEM.
You can read more about this <a href="https://blog.aheymans.xyz/about-car/">here</a>.
</p>

<p>
Coreboot has support for setting up and tearing down CAR with two different codepaths:
</p>

<ul class="org-ul">
<li>Using an open source implementation.</li>
<li>Using a closed source implementation, using FSP-T (TempRamInit) and FSP-M (TempRamExit).</li>
</ul>

<p>
In coreboot the open source implementation is the most used one. For instance
all Google chromeos platforms use it, so it&rsquo;s well tested. FSP is a propriatary
binary provided by Intel that can be split up into 3 components: FSP-T (which is
in charge of setting up the early execution environment), FSP-M (which
configures the DRAM controller), FSP-S (further silicon init). With the FSP
codepath in coreboot you call into FSP-T using the TempRamInit API to set up the
early execution environment in which you can execute C code later on. This
binary sets up CAR just like coreboot does, but also does some initial hardware
initialisation like setting up PCIe memory mapped configuration space. On most
platforms coreboot is fully able to do that early hardware init itself, so that
extra initialisation in FSP-T is superfluous.
</p>

<p>
After DRAM has been initialised, you want to tear down the CAR environment to
start executing code in actual DRAM. Coreboot can do that using open source
code. It&rsquo;s typically just a <a href="https://review.coreboot.org/plugins/gitiles/coreboot/+/refs/heads/master/src/soc/intel/common/block/cpu/car/exit_car.S">few lines</a> of assembly code to disable the
non-eviction mode that CPU is running in. The other option is to call FSP-M with
the TempRamExit API. See <a href="https://www.intel.com/content/dam/www/public/us/en/documents/technical-specifications/fsp-architecture-spec-v2.pdf">FSP v2.0 spec</a> for more information on TempRamInit and
TempRamExit . Sidenote: running FSP-T TempRamInit does not necessarily mean you
need to run TempRamExit, as it is possible to just reuse the simple coreboot
code. This is done on some platforms to avoid problems with TempRamExit.
</p>

<p>
It&rsquo;s generally a very bad idea to give up control of setting up the execution
environment to external code. The most important technical reason to not do
this, is because coreboot needs to be in control of the caching setup. When that
is not the case you encounter all kinds of problems because that assumption is
really baked in to many parts of the code. Coreboot has different stages:
bootblock, romstage, ramstage and those are actually all separate programs that
have their well defined execution environment. If a blob or reference code sets
up or changes the execution environment, it makes proper integration much
harder. Before Intel started integrating FSP into coreboot, AMD had a go at
integrating their reference code, called AGESA into coreboot. Even though AGESA
was not provided as blob but as open source code, it had very similar
integration issues, for exactly this reason: it messed with the execution
environment. As a matter of fact, Intel FSP v1.0 messed up the execution
environment so badly that it was deemed fatally flawed. Support for FSP v1.0 was
subsequently dropped from the coreboot master branch. So for technical reasons
you want to <b>avoid</b> using FSP-T inside coreboot at all costs.
</p>

<p>
From a marketting perspective FSP-T is also a <b>disaster</b>. You really cannot call
coreboot an open source firmware project if even setting up the execution
environment is delegated to a blob.
</p>
</div>
</section>

<section id="outline-container-org12d29f4" class="outline-2">
<h2 id="org12d29f4">Open source cache as ram with Intel Bootguard</h2>
<div class="outline-text-2" id="text-org12d29f4">
<p>
One of the reasons why there still is code to integrate FSP-T inside coreboot is
for Intel Bootguard support. <a href="https://9esec.io/blog/hardware-assisted-root-of-trust-mechanism-and-coreboot-internals/">Here</a> you can read more on our work with that
technology. Open source CAR did not work when the Bootguard ACM was run before
reset.
</p>

<p>
So with Bootguard, the first instruction that is run on the main CPU is not the
reset vector at <code>0xfffffff0</code> anymore. The Intel Management Engine, ME validates
the Authenticated Code Module or ACM with keys owned by Intel. The ACM code then
verifies parts of the main bootfirmware, in this case the coreboot bootblock,
with a key owned by the OEM which is fused inside the ME hardware. To do this
verification the ACM sets up an execution environment using exactly the same
method as the main firmware: using NEM.
</p>

<p>
The reason that open source cache as ram does not work is because the ACM did
already set up NEM. So what needs to be done is to skip the NEM setup. You just
want to set up a caching environment for the coreboot CAR, fill those cachelines
and leave the rest of setup as is. Bootguard capable CPUs have a readonly MSR,
with a bit that indicates if NEM setup has already been done by an ACM. When
that is the case a different codepath needs to be taken, that avoids setting up
NEM again. See <a href="https://review.coreboot.org/c/coreboot/+/36682">CB:36682</a> and <a href="https://review.coreboot.org/c/coreboot/+/54010">CB:54010</a>. It looks like filling cachelines for CAR
is also a bit more tricky and needs more explicit care <a href="https://review.coreboot.org/c/coreboot/+/55791">CB:55791</a>. So with very
little code we were able to get bootguard working with open source CAR!
</p>


<div id="orge18dfbb" class="figure">
<p><img src="../images/posts/no_fspt_bin.png" alt="no_fspt_bin.png" class="center no-border" width="70%" height="70%" />
</p>
<p><span class="figure-number">Figure 1: </span>no fspt.bin in cbfs:</p>
</div>


<div id="org279bc9e" class="figure">
<p><img src="../images/posts/no_fspt_bin.png" alt="no_fspt_bin.png" class="center no-border" width="70%" height="70%" />
</p>
<p><span class="figure-number">Figure 2: </span>No FSP-T loaded at runtime</p>
</div>

<p>
and here you see that bootblock is run with a working console and that romstage
is loaded. This means that cache as ram works as intended. Console and Bootguard
success! Cache as Ram without FSP-T worked.
</p>
</div>
</section>

<section id="outline-container-org81b6332" class="outline-2">
<h2 id="org81b6332">What&rsquo;s next?</h2>
<div class="outline-text-2" id="text-org81b6332">
<p>
Given that all Intel Client silicon now work with open source cache as ram
including Bootguard support, there are no reasons to keep FSP-T as a supported
option for these platforms. There are however still Intel platforms in the
coreboot tree that require FSP-T. Skylake-SP, Cooperlake-SP and Denverton-NS
depend on the other early hardware init that is done in FSP-T for which there is
no open source equivalent in coreboot. This makes FSP-T mandatory on those
platforms, for the time being.
</p>

<p>
The advantages of being in control of the execution environment are
overwhelming. From personal experience on working with the Cooperlake SP
platform, we did regularly hit issues with FSP-T. Sometimes those were bugs
inside the FSP-T code that had to be worked around. On other ocassions it was
coreboot making assumptions on the bootflow that were not compatible with FSP
being in control of the execution environment. I can firmly say that FSP-T
causes more troubles than it actually solves, so having that code open sourced
is the best strategy. We hope that by setting this good example with open source
Bootguard support, others will be incentivised to not rely on FSP-T but pursue
open source solutions.
</p>
</div>
</section>
</main>
<footer id="postamble" class="status">
<div class='footer'>
  Copyright © 2022 Arthur Heymans<br>
  Last updated on Oct 11, 2022. Generated using <a href="https://www.gnu.org/software/emacs/">Emacs</a> 29.0.50 (<a href="https://orgmode.org">Org</a> mode 9.4.6).
</div>
</footer>
</body>
</html>
